options
{
    JAVA_UNICODE_ESCAPE = true;
    LOOKAHEAD=3;
    STATIC=false;
}

PARSER_BEGIN(MathParser)

package com.mesut.math.parser;

import com.mesut.math.core.*;
import com.mesut.math.operator.*;
import java.util.*;

public class MathParser
{
 
}
PARSER_END(MathParser)

SKIP :
{
    " "  |   "\r"  |  "\n"  |  "\t"
}

TOKEN:
{
    < NUMBER: (<DIGIT>)+ ( "." (<DIGIT>)+ )? >  
 |  < DIGIT: ["0"-"9"] >
}

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COLON: ":" >
| < COMMA: "," >
| < DOT: "." >
}

TOKEN:
{
  <EQ: "=" >
| <PLUS: "+" >
| <MINUS: "-">
| <MUL: "*" >
| <DIV: "/">
}

TOKEN: /* must be before <IDENT>*/
{
  <PI: "pi"|"Pi"|"PI">
  |<E: "e"|"E">
  |<PHI: "phi"|"PHI"|"Phi">
  |<I: "i"|"I">
  |<INF: "inf"|"INF"|"Inf">
}

TOKEN:
{
  <IDENT: <CHAR> (<CHAR> | <DIGIT>)*>
| <#CHAR: ["a"-"z","A"-"Z"]>
}

func line():
{
  func f;
}
{
  f= arg() <EOF>
  {return f;}
}

func equation():
{
  func left, right;
}
{
  left = lhs() "=" right = expr(){return new Equation(left,right);}
  {
    return left;
  }
}

func lhs():{
 func res;
}
{
  res = funcCall(){return res;} | res = var(){return res;}
}

func expr():
{
  func a,b;
}
{
  a=mul()
  ("+" b=mul(){a=a.add(b);}
  |"-" b=mul(){a=a.add(b.negate());})*
  { return a; }
}

func mul():
{
 func a,b;
}
{
  a=pow()
  ("*" b=pow(){a=a.mul(b);}
  |"/" b=pow(){a=a.div(b);})*
  {return a;}
}

func pow():{
 func a,b;
}
{
  a=unary() ("^" b=unary(){a=a.pow(b);})*
  {return a;}
}

func unary():
{
  func a;
}
{
  "-" a=element(){return a.negate();}
  | a=element() ["!"{return a.fac();}] {return a;}
}

func element():
{
  func a;
}
{
    a = num(){return a;}
  | a = funcCall(){return a;}
  | a = cons(){return a;}
  | a = var(){return a;}
  | "(" a = expr() ")" {return a;}
}

//user defined,or predefined functions
func funcCall():
{
  String name;
  List<func> arg=new ArrayList<>();
}
{
  name = name() "(" (args(arg))? ")"
  {return func.makeFunc(name,arg);}
}

String name():{
 Token t;
}{
   (t=<IDENT> | t=<PI>){return t.image;}
}

void args(List<func> arg):
{
  func a;
}
{
  a = arg() {arg.add(a);} ("," a = arg() {arg.add(a);})*
}

func arg():
{
  func res;
}
{
  LOOKAHEAD(lhs() "=") res = equation(){return res;} | res = expr(){return res;}
}

func cons():
{
  func a;
}
{
  <E>{return cons.E;}
| <PI>{return cons.PI;}
| <PHI>{return cons.PHI;}
| <I>{return cons.i;}
| <INF>{return cons.INF;}
}

func var():
{
  Token token;
}
{
  token=<IDENT>{return new variable(token.toString());}
}

func num():
{
  Token token;
}
{
 token=<NUMBER>{return new cons(Double.parseDouble(token.toString()));}
}
