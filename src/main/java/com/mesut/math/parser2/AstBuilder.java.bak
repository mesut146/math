package com.mesut.math.parser2;

import com.mesut.math.core.Equation;
import com.mesut.math.core.cons;
import com.mesut.math.core.func;
import com.mesut.math.core.variable;

import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

public class AstBuilder {

    public static func make(String line) throws IOException {
        Lexer lexer = new Lexer(new StringReader(line));
        Parser parser = new Parser(lexer);
        return new AstBuilder().visitLine(parser.line());
    }

    private func visitLine(Ast.line line) {
        return visitArg(line.arg);
    }

    public func visitEq(Ast.eq eq) {
        return new Equation(visitLhs(eq.lhs), visitExpr(eq.expr));
    }

    private func visitLhs(Ast.lhs lhs) {
        if (lhs.var != null) {
            return visitVar(lhs.var);
        }
        else {
            return visitFuncCall(lhs.funcCall);
        }
    }

    private func visitFuncCall(Ast.funcCall funcCall) {
        List<func> args = new ArrayList<>();
        if (funcCall.args != null) {
            args.add(visitArg(funcCall.args.arg));
            for (Ast.argsg1 g1 : funcCall.args.rest) {
                args.add(visitArg(g1.arg));
            }
        }
        return func.makeFunc(visitName(funcCall.name), args);
    }

    private String visitName(Ast.name name) {
        if (name.IDENT != null) {
            return name.IDENT.value;
        }
        else {
            return name.PI.value;
        }
    }

    private func visitArg(Ast.arg arg) {
        if (arg.eq != null) {
            return visitEq(arg.eq);
        }
        else {
            return visitExpr(arg.expr);
        }
    }

    private func visitVar(Ast.var var) {
        return variable.from(var.IDENT.value);
    }

    private func visitExpr(Ast.expr expr) {
        if (expr.expr1 != null) {
            return visitExpr(expr.expr1.expr).fac();
        }
        else if (expr.expr2 != null) {
            func rhs;
            if (expr.expr2.g1.exprg11 != null) {
                rhs = visitPRIM(expr.expr2.g1.exprg11.PRIM).fac();
            }
            else {
                rhs = visitExpr(expr.expr2.g1.exprg12.expr).negate();
            }
            return visitExpr(expr.expr2.expr).pow(rhs);
        }
        else if (expr.expr3 != null) {
            return visitExpr(expr.expr3.expr).negate();
        }
        else if (expr.expr4 != null) {
            if (expr.expr4.g2.STAR != null) {
                return visitExpr(expr.expr4.expr).mul(visitExpr(expr.expr4.expr2));
            }
            else {
                return visitExpr(expr.expr4.expr).div(visitExpr(expr.expr4.expr2));
            }
        }
        else if (expr.expr5 != null) {
            if (expr.expr5.g3.PLUS != null) {
                return visitExpr(expr.expr5.expr).add(visitExpr(expr.expr5.expr2));
            }
            else {
                return visitExpr(expr.expr5.expr).sub(visitExpr(expr.expr5.expr2));
            }
        }
        else if (expr.PRIM != null) {
            return visitPRIM(expr.PRIM);
        }
        else {
            throw new RuntimeException();
        }
    }

    private func visitPRIM(Ast.PRIM elem) {
        if (elem.cons != null) {
            return visitCons(elem.cons);
        }
        else if (elem.lhs != null) {
            return visitLhs(elem.lhs);
        }
        else {
            //paren
            return visitExpr(elem.prim3.expr);
        }
    }

    private func visitCons(Ast.cons node) {
        if (node.NUM != null) {
            return cons.of(Double.parseDouble(node.NUM.value));
        }
        else if (node.E != null) {
            return cons.E;
        }
        else if (node.I != null) {
            return cons.i;
        }
        else if (node.PHI != null) {
            return cons.PHI;
        }
        else if (node.PI != null) {
            return cons.PI;
        }
        else if (node.INF != null) {
            return cons.INF;
        }
        else {
            throw new RuntimeException("invalid cons: " + node);
        }
    }
}
